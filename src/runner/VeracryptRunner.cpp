//  Licensed under the GNU LESSER GENERAL PUBLIC LICENSE Version 2.1. See License in the project root for license information.
#include "VeracryptRunner.h"

#include <QDBusConnection>
#include <QDBusArgument>
#include <QDBusMetaType>
#include <QDebug>
#include <iostream>

// Generated by qt5_add_dbus_adaptor command im CMakeLists.txt file
#include "krunner1adaptor.h"

VeracryptRunner::VeracryptRunner() {
    new Krunner1Adaptor(this);
    qDBusRegisterMetaType<RemoteMatch>();
    qDBusRegisterMetaType<RemoteMatches>();
    qDBusRegisterMetaType<RemoteAction>();
    qDBusRegisterMetaType<RemoteActions>();
    QDBusConnection::sessionBus().registerService(QStringLiteral("net.veracryptrunner2"));
    QDBusConnection::sessionBus().registerObject(QStringLiteral("/veracryptrunner"), this);
}

RemoteMatches VeracryptRunner::Match(const QString &searchTerm) {
    RemoteMatches ms;
    if (!searchTerm.contains(queryRegex)) {
        return ms;
    }
    if (!initialized) {
        manager = new VeracryptVolumeManager();
        volumes = manager->getVeracryptVolumes();
    }
    queryRegex.indexIn(searchTerm);
    const QString volumeQuery = queryRegex.cap(1);
    for (const auto &volume:volumes) {
        if (volume->name.contains(volumeQuery, Qt::CaseInsensitive)) {
            RemoteMatch m;
            m.id = volume->name;
            m.text = "Mount Volume: " + volume->name;
            m.iconName = iconName;
            m.type = Plasma::QueryMatch::ExactMatch;
            m.relevance = (float) volumeQuery.size() / volume->name.size();
            ms.append(m);
        }
    }
    return ms;

}

RemoteActions VeracryptRunner::Actions() {
    RemoteAction action;
    action.id = QStringLiteral("action1");
    action.text = QStringLiteral("Action 1");
    action.iconName = QStringLiteral("documentinfo");

    return RemoteActions({action});
}

void VeracryptRunner::Run(const QString &id, const QString &actionId) {
    std::cout << "Running:" << qPrintable(id) << ":" << qPrintable(actionId) << std::endl;
    std::cout.flush();
}
